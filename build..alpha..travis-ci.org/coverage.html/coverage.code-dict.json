{"/home/travis/build/npmtest/node-npmtest-copy-browser-modules/test.js":"/* istanbul instrument in package npmtest_copy_browser_modules */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-copy-browser-modules/lib.npmtest_copy_browser_modules.js":"/* istanbul instrument in package npmtest_copy_browser_modules */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_copy_browser_modules = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_copy_browser_modules = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-copy-browser-modules/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-copy-browser-modules && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_copy_browser_modules */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_copy_browser_modules\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_copy_browser_modules.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_copy_browser_modules.rollup.js'] =\n            local.assetsDict['/assets.npmtest_copy_browser_modules.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_copy_browser_modules.__dirname + '/lib.npmtest_copy_browser_modules.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-copy-browser-modules/node_modules/copy-browser-modules/index.js":"var rpt = require('read-package-tree');\nvar iferr = require('iferr');\nvar rsvp = require('rsvp');\nvar path = require('path');\nvar selectFiles = require('./select-files');\nvar Nfstream = require('fstream-npm');\nvar fstream = require('fstream');\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\n\nfunction collectBrowser(root) {\n    return new rsvp.Promise(function (accept, reject) {\n        rpt(root, iferr(reject, function (rootPkg) {\n            var out = [];\n            var packages = {};\n            var duplicates = {};\n            var overrides = (rootPkg.package.browserPackage && rootPkg.package.browserPackage.overrides) || {};\n            rootPkg.children.forEach(processPackage);\n\n            function processPackage(c) {\n                var browser = overrides[c.package.name] || c.package.browserPackage;\n                if (!browser) return;\n                var pkg = typeof browser === 'object' ? extendedCleanedMinusBrowser(c.package, browser) : c.package;\n                var pkgroot = c.path;\n\n                if (packages[c.package.name]) {\n                    duplicates[c.package.name] = c;\n                } else {\n                    packages[c.package.name] = c;\n                }\n\n                pkg.location = path.relative(root, pkgroot);\n\n                out.push(pkg);\n                c.children.forEach(processPackage);\n            }\n\n            if (Object.keys(duplicates).length) {\n                reject(new Error(\"Overlapping packages found: \" + Object.keys(duplicates).join(\", \")));\n            } else {\n                accept(out);\n            }\n        }));\n    });\n}\n\nfunction extendedCleanedMinusBrowser(/* ... */) {\n    var out = {};\n    for (var i = 0; i < arguments.length; i++) {\n        for (var k in arguments[i]) {\n            if (k === 'browserPackage') continue;\n            if (k[0] === '_') continue;\n            out[k] = arguments[i][k];\n        }\n    }\n    return out;\n}\n\nfunction collectFiles(root) {\n    return function (pkg) {\n        if (pkg.files) {\n            return pkg;\n        } else {\n            return selectFiles(path.resolve(root, pkg.location)).then(function (files) {\n                pkg.files = files;\n                return pkg;\n            });\n        }\n    };\n}\n\nfunction writeJSON(file, data) {\n    return new rsvp.Promise(function (a, r) {\n        fs.writeFile(file, JSON.stringify(data, null, 2), iferr(r, a));\n    });\n}\n\nfunction copyFromTo(root, dest, each, docroot) {\n    return function (pkgs) {\n        return rsvp.all(pkgs.map(function (pkg) {\n            var target = path.resolve(docroot, dest, pkg.name);\n            var source = path.resolve(root, pkg.location);\n            return new rsvp.Promise(function (accept, reject) {\n                mkdirp(target, iferr(reject, function () {\n                    var reader = new Nfstream({ path: source, package: pkg });\n                    var writer = new fstream.Writer(target);\n                    reader.on('package', function (p) {\n                        // Clobber the files with our fixed up copy.\n                        p.files = pkg.files;\n                    });\n                    writer.on('close', accept);\n                    writer.on('error', reject);\n                    reader.pipe(writer);\n                }));\n            }).then(function () {\n                pkg.location = path.relative(docroot, target);\n                return writeJSON(path.resolve(target, 'package.json'), pkg);\n            }).then(function () {\n                if (each) {\n                    each(pkg);\n                }\n                return pkg;\n            });\n        }));\n    };\n}\n\nmodule.exports = function copyBrowserTo(options) {\n    var root, dest, each, docroot;\n    if (arguments.length > 1 && arguments.length <= 3) {\n        root = arguments[0];\n        dest = arguments[1];\n        each = arguments[2];\n        docroot = process.cwd();\n    } else {\n        root = options.src;\n        dest = options.dest;\n        each = options.each;\n        docroot = options.basePath || process.cwd();\n    }\n\n    return collectBrowser(root).then(function (pkgs) {\n        return rsvp.map(pkgs, collectFiles(root));\n    }).then(copyFromTo(root, dest, each, path.resolve(docroot)));\n};\n\n","/home/travis/build/npmtest/node-npmtest-copy-browser-modules/node_modules/copy-browser-modules/select-files.js":"\"use strict\";\n\nvar fs = require('fs');\nvar path = require('path');\nvar iferr = require('iferr');\nvar rsvp = require('rsvp');\n\nmodule.exports = function selectFiles(dir) {\n    return getIgnores(dir).then(function (ignores) {\n        return readDir(dir).then(function (entries) {\n            return entries.filter(function (e) {\n                return shouldPackageEntry(e, ignores);\n            });\n        });\n    });\n};\n\nfunction readFile(file) {\n    return new rsvp.Promise(function (accept, reject) {\n        fs.readFile(file, iferr(reject, accept));\n    });\n}\n\nfunction readDir(file) {\n    return new rsvp.Promise(function (accept, reject) {\n        fs.readdir(file, iferr(reject, accept));\n    });\n}\n\nfunction getIgnores(dir) {\n    return readFile(path.resolve(dir, '.npmignore')).catch(function (err) {\n        if (err.code === 'ENOENT') {\n            return readFile(path.resolve(dir, '.gitignore')).catch(function (e) {\n                if (e.code === 'ENOENT') {\n                    return '';\n                } else {\n                    throw e;\n                }\n            });\n        } else {\n            throw err;\n        }\n    }).then(parse);\n}\n\nfunction parse(file) {\n    return file.toString().split(/\\r?\\n/).filter(function (e) {\n        return !e.match(/^\\s*$/) || !e.match(/^#/);\n    });\n}\n\nfunction shouldPackageEntry(entry, ignores) {\n    // This will be written with updated, amd-shaped version\n    if (entry === 'package.json') return false;\n\n    // readme files should never be ignored.\n    if (entry.match(/^readme(\\.[^\\.]*)$/i)) return true;\n\n    // license files should never be ignored.\n    if (entry.match(/^(license|licence)(\\.[^\\.]*)?$/i)) return true;\n\n    // changelogs should never be ignored.\n    if (entry.match(/^(changes|changelog|history)(\\.[^\\.]*)?$/i)) return true;\n\n    // If you need this, all bets are off.\n    if (entry === 'node_modules') return false;\n\n    // some files are *never* allowed under any circumstances\n    if (entry === '.git' ||\n        entry === '.lock-wscript' ||\n        entry.match(/^\\.wafpickle-[0-9]+$/) ||\n        entry === 'CVS' ||\n        entry === '.svn' ||\n        entry === '.hg' ||\n        entry.match(/^\\..*\\.swp$/) ||\n        entry === '.DS_Store' ||\n        entry.match(/^\\._/) ||\n        entry === 'npm-debug.log'\n        ) {\n        return false;\n    }\n\n    for (var i in ignores) {\n        if (typeof ignores[i] === 'string') {\n            if (entry === ignores[i]) return false;\n        } else {\n            if (entry.match(ignores[i])) return false;\n            // FIXME should use minimatch\n        }\n    }\n\n    return true;\n}\n","/home/travis/build/npmtest/node-npmtest-copy-browser-modules/node_modules/copy-browser-modules/copy-browser-modules.js":"#!/usr/bin/env node\n\nvar copyBrowserTo = require('./');\n\nif (process.argv.length === 4) {\n    copyBrowserTo(process.argv[2], process.argv[3]).catch(function (err) {\n        console.warn(err);\n        process.exit(1);\n    });\n} else {\n    console.warn(\"Use: \" + process.argv.slice(0, 2).join(\" \") + \" source target\");\n    process.exit(2);\n}\n"}